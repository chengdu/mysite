#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Copyright (C) 2019 Sevenuc Consulting
http://sevenuc.com/en/Speare.html

YOU CAN MODIFY THIS SCRIPT FOR PERSONAL USAGE FREELY, BUT 
USED IN ANY COMMERCIAL PRODUCT WITHOUT THE WRITTEN PERMISSION
OF THE AUTHOR IS NOT ALLOWED.
"""

#This is a simple script that used to clean folders especially when you check
#out source code from repository managed by version control systems, such as
#Git, Mercurial, Subversion and CVS. It also delete all hidden file and folders
#produced by compiler, build system and IDE that always cause your disk occupied
#by large number of stuff that you don't want to keep anymore.

import os, os.path
import sys

if (sys.version_info.major == 2):
    reload(sys)
    sys.setdefaultencoding('utf-8')

all_hidden = False  #delete all hidden folder and files
build_libs = False  #delete .deps and .libs folders

ignores = ['.DS_Store'] #file or folder to ignore on macOS
defiles = ['.cvsignore', '.hgignore', '.gitignore', '.circleci'] #list of files to delete
folders = ['.git', '.gitmodules', '.gitignore', '.svn', '.hg']   #list of folders to delete
extensions = ['.o', '.lo', '.la'] #file types to delete
ignoredirs = ['/Users/henry/Desktop/Machine/1101/bitcoinbook.git', #don't scan the folders
     '/Users/henry/Desktop/Sonora']

#* Careful!! .d conflict with the D programming language files.
#extensions.append('.d') #append .d files generated by CMake

def clean_folder(dir):
    global ignores, defiles, folders, extensions, ignoredirs
    if build_libs:
        folders.append('.deps')
        folders.append('.libs')

    for root, dirs, files in os.walk(dir):
        for d in list(dirs):
            if d in ['.', '..']: continue
            if d in ignores: continue
            fullpath = os.path.join(root, d)
            if fullpath in ignoredirs: continue
            if d[0] == '.':
                if all_hidden or d in folders:
                    print(fullpath)
                    #os.rmdir(fullpath)
                    os.system('rm -rf "' + fullpath + '"')
            elif d == 'CVS':
                shoulddelete = True
                for root, dirs, files in os.walk(fullpath):
                    a = ['Entries', 'Repository', 'Root', 'Entries.Log']
                    for name in a:
                        if not name in files: shoulddelete = False
                if shoulddelete:
                    print(fullpath)
                    os.system('rm -rf "' + fullpath + '"')
            elif d == 'DerivedData':
                fullpath2 = os.path.join(root, "build")
                if os.path.exists(fullpath2):
                    print(fullpath)
                    os.system('rm -rf "' + fullpath + '"')
                    print(fullpath2)
                    os.system('rm -rf "' + fullpath2 + '"')
            else:
                pass #if fullpath in ignoredirs: continue
              
        for f in files:
            if f in ignores: continue
            fullpath = os.path.join(root, f)
            ext  = os.path.splitext(fullpath)[1]
            if f in defiles or ext in extensions:
                print(fullpath)
                os.system('rm -rf "' + fullpath + '"')
            if(all_hidden and f[0] == '.'):
                print(fullpath)
                #os.remove(fullpath)
                os.system('rm -rf "' + fullpath + '"')

def usage():
    print('Usage: '+sys.argv[0]+' [-a] [-b] [-d folder]')
    print(' -a, --all delete all hidden folder and files, default is false.')
    print(' -b, --build delete all .deps and .libs folders, default is true.')
    print(' -d, --dir the full path of the folder you want to clean.')
    print(' e.g: '+sys.argv[0]+' -d "/Users/henry/Product/iCodeEditor/third-party"')
    print(' e.g: '+sys.argv[0]+' -a True -d "/Users/henry/Product/Bamboo"')

def main():
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-a', '--all', dest='all_hidden', type=bool, default='False',
                   help='Delete all hidden folder and files, default is false.')
    parser.add_argument('-b', '--build', dest='build_libs', type=bool, default='True',
                  help='Delete all .deps and .libs folders, default is true.')
    parser.add_argument('-d', '--dir', dest='dir', type=str, default='',
                   help='The folder to clean')
    parser.set_defaults(all_hidden=False)
    args = parser.parse_args()
    
    dir = args.dir
    if len(dir) == 0:
        usage()
        return
    all_hidden = args.all_hidden
    clean_folder(dir)

if __name__ == "__main__":
  main()

